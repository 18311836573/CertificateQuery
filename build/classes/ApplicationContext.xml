<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                http://www.springframework.org/schema/context  
                 http://www.springframework.org/schema/context/spring-context-3.2.xsd  
                http://www.springframework.org/schema/tx   
                http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
				<value>classpath:executor.properties</value>
			</list>
		</property>
	</bean>
	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.user}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxTotal" value="${jdbc.maxActive}"></property>
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<property name="maxWaitMillis" value="6000"></property>
	</bean>


	<!-- 下面这两个开启了自动扫描功能 -->
	<!-- 开启注解配置 即Autowried -->
	<context:annotation-config />
	<!-- 使用自动注入的时候要 添加他来扫描bean之后才能在使用的时候 -->
	<!--其实component-scan 就有了annotation-config的功能即把需要的类注册到了spring容器中 -->
	<context:component-scan base-package="com.certificateQuery" />
	<!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory -->
	<!-- 而像这种使用接口实现的方式 是使用sqlsessionTemplate来进行操作的，他提供了一些方法 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis配置文件路径 -->
		<!-- <property name="configLocation" value="" /> -->
		<!-- 实体类映射文件路径 -->
		<property name="mapperLocations" value="classpath:com/certificateQuery/Mapping/*.xml" />
	</bean>

	<!-- 配置sqlsession 产生这个实例就是通过 sqlsessionTemplate来实现的 -->
	<bean id="sqlSession" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.certificateQuery.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!--MailSender -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${host}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">25000</prop>
				<!-- <prop key="mail.smtp.starttls.enable">true</prop> <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> -->
			</props>
		</property>
	</bean>


	<!--配置线程池 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="${executor.corePoolSize}" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="${executor.maxPoolSize}" />
		<!-- 最大队列数 -->
		<property name="queueCapacity" value="${executor.queueCapacity}" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="${executor.keepAliveSeconds}" />
	</bean>

	<!-- 事务 需要三件事才可以 一具体的事务实现着 二事务管理器 三 aop 事务控制 不起作用 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
<!-- 	使用全注释事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 定义个通知，指定事务管理器 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="txManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="delete*" propagation="REQUIRED" read-only="false" -->
	<!-- rollback-for="java.lang.Exception" /> -->
	<!-- <tx:method name="save*" propagation="REQUIRED" read-only="false" -->
	<!-- rollback-for="java.lang.Exception" /> -->
	<!-- <tx:method name="insert*" propagation="REQUIRED" read-only="false" -->
	<!-- rollback-for="java.lang.Exception" /> -->
	<!-- <tx:method name="update*" propagation="REQUIRED" read-only="false" -->
	<!-- rollback-for="java.lang.Exception" /> -->
	<!-- <tx:method name="load*" propagation="SUPPORTS" read-only="true" /> -->
	<!-- <tx:method name="find*" propagation="SUPPORTS" read-only="true" /> -->
	<!-- <tx:method name="search*" propagation="SUPPORTS" read-only="true" /> -->
	<!-- <tx:method name="select*" propagation="SUPPORTS" read-only="true" /> -->
	<!-- <tx:method name="get*" propagation="SUPPORTS" read-only="true" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

	<!-- 配置一个切入点 -->
	<!-- <aop:config> -->
	<!-- <aop:pointcut id="serviceMethods" -->
	<!-- expression="execution(* com.certificateQuery.service.*ServiceImpl.*(..))" 
		/> -->
	<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" /> -->
	<!-- </aop:config> -->
</beans>  